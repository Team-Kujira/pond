#!/usr/bin/env python3

import argparse
import subprocess
import shutil
import sys
import os
import json
import requests


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--namespace", default="teamkujira")

    subparsers = parser.add_subparsers()
    subparsers.required = True
    subparsers.dest = "command"

    init_parser = subparsers.add_parser("init", help="initialize new pond")
    init_parser.add_argument("--nodes", type=int, default=1,
                             help="number of validators")
    init_parser.add_argument("--podman", action="store_true",
                             help="use podman")
    init_parser.add_argument("--docker", action="store_true",
                             help="use docker")
    init_parser.add_argument("--kujira-version", default="mainnet")
    init_parser.add_argument("--feeder-version", default="mainnet")

    start_parser = subparsers.add_parser("start", help="start components")
    start_parser.add_argument("target", nargs="?")

    stop_parser = subparsers.add_parser("stop", help="stop components")
    stop_parser.add_argument("target", nargs="?")

    subparsers.add_parser("info", help="info components")

    subparsers.add_parser("tags", help="print available tags")

    return parser.parse_args()


def get_tags(namespace, components=["kujira", "feeder"]):
    all_tags = {}
    baseurl = f"https://hub.docker.com/v2/namespaces/{namespace}/repositories"

    for component in components:
        url = f"{baseurl}/{component}/tags"
        # print(url)
        response = requests.get(url)
        if response.status_code != 200:
            print(f"docker api returned http-{response.status_code}")
            return

        tags = []
        data = response.json()
        for result in data.get("results", []):
            tag = result["name"]
            if tag.endswith("-arm64") or tag.endswith("-x86_64"):
                continue
            tags.append(tag)

        all_tags[component] = tags
    # https://hub.docker.com/v2/namespaces/teamkujira/repositories/feeder/tags

    print(json.dumps(all_tags, indent=2))


def start_node_cmd(cmd, namespace, name, version, home, ports):
    port_args = " ".join([f"-p 127.0.0.1:{x}:{x}" for x in ports])

    commands = {
        "docker": [
            f"docker rm {name}".split(),
            f"docker run -e USER=$UID -d {port_args} --network pond --name {name} --network-alias {name} -v {home}/{name}:/kujira {namespace}/kujira:{version} kujirad --home /kujira start".split()
        ],
        "podman": [
            f"podman run --name {name} -d --pod pond -v {home}/{name}:/kujira {namespace}/kujira:{version} kujirad --home /kujira start".split()
        ]
    }

    return commands.get(cmd)


def start_feeder_cmd(cmd, namespace, name, version, home, mnemonic):
    commands = {
        "docker": [
            f"docker rm {name}".split(),
            f"docker run -e USER=$UID -d --network pond --network-alias {name} --name {name} -v {home}/{name}:/feeder -e".split(
            ) + [f"PRICE_FEEDER_MNEMONIC={ mnemonic }", f"{namespace}/feeder:{version}"]
        ],
        "podman": [
            f"podman run --name {name} -d --pod pond -v {home}/{name}:/feeder -e".split(
            ) + [f"PRICE_FEEDER_MNEMONIC={ mnemonic }", f"{namespace}/feeder:{version}"]
        ]
    }

    return commands.get(cmd)


def init(home, args):
    cmd = None
    extra_args = []

    if args.docker:
        cmd = "docker"
    elif args.podman:
        cmd = "podman"
    else:
        if shutil.which("docker"):
            cmd = "docker"
        elif shutil.which("podman"):
            cmd = "podman"

    if not cmd:
        print("neither docker nor podman found")
        sys.exit(1)

    if cmd == "docker":
        uid = os.getuid()
        cmd = ["docker", "run", "-e", f"USER={uid}"]
    else:
        cmd = ["podman", "run"]
        extra_args = ["--podman"]

    if not os.path.isdir(home):
        os.mkdir(home)
    else:
        if os.listdir(home):
            while True:
                sys.stdout.write(
                    "Delete existing chain data and init new chain? [y/N] "
                )
                choice = input().lower()

                if choice in ["y", "yes"]:
                    break

                if choice in ["", "n", "no"]:
                    return

    kujira_cmd = cmd + [
        "-v", f"{home}:/tmp/pond",
        f"docker.io/{args.namespace}/prepare-kujira:{args.kujira_version}",
        "prepare.py", "--nodes", f"{args.nodes}", "--clear"
    ] + extra_args

    feeder_cmd = cmd + [
        "-v", f"{home}:/tmp/pond",
        f"docker.io/{args.namespace}/prepare-feeder:{args.feeder_version}",
        "prepare.py",
    ] + extra_args

    # print(kujira_cmd)
    # print(feeder_cmd)

    subprocess.run(kujira_cmd)
    subprocess.run(feeder_cmd)


def info(home):
    print(json.dumps(
        json.load(open(f"{home}/pond.json", "r")),
        indent=2,
    ))


def start(args, config, home):
    cmd = config.get("command")
    if not cmd:
        print("command not set")

    ns = args.namespace

    commands = [["sleep", "2"]]

    ports = []
    for chain_id, chain in config["chains"].items():
        for validator in chain["validators"]:
            _ports = [
                validator["api_url"].split(":")[-1],
                validator["rpc_url"].split(":")[-1]
            ]

            ports += _ports

            name = validator["moniker"].lower()
            version = config["version"]["kujira"]
            commands = start_node_cmd(
                cmd, ns, name, version, home, _ports
            ) + commands

            if chain_id == "pond-1":
                name = name.replace("kujira", "feeder")
                version = config["version"]["feeder"]
                commands += start_feeder_cmd(
                    cmd, ns, name, version, home, validator["mnemonic"]
                )

    port_args = " ".join([f"-p {x}:{x}" for x in ports])

    if cmd == "podman":
        commands = [
            f"podman pod rm --force pond".split(),
            f"podman pod create --name pond {port_args}".split()
        ] + commands

    if cmd == "docker":
        commands = [
            "docker network rm pond".split(),
            "docker network create pond".split()
        ] + commands

    run(commands)


def stop(config):
    cmd = config.get("command")
    if not cmd:
        print("command not set")

    commands = []
    for chain_id, chain in config["chains"].items():
        for validator in chain["validators"]:
            name = validator["moniker"].lower()
            commands.append([cmd, "kill", name])

            if chain_id == "pond-1":
                name = name.replace("kujira", "feeder")
                commands.append([cmd, "kill", name])

    if cmd == "podman":
        commands.append([cmd, "pod", "kill", "pond"])

    run(commands)


def run(commands):
    for cmd in commands:
        # print(cmd)
        subprocess.run(cmd)


def main():
    args = parse_args()

    home = os.path.expanduser("~") + "/.pond"
    config = None

    if args.command == "init":
        init(home, args)
    else:
        if not os.path.isdir(home):
            print(f"{home} not found, you need to init pond at first")
            sys.exit(1)

        config = json.load(open(f"{home}/pond.json", "r"))

        if args.command == "start":
            start(args, config, home)
        elif args.command == "stop":
            stop(config)
        elif args.command == "info":
            info(home)
        elif args.command == "tags":
            get_tags(args.namespace)


if __name__ == "__main__":
    main()
